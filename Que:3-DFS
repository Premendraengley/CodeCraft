import java.util.*;

public class DFSGraph {
    
    // Define the graph as an adjacency list
    private Map<Integer, List<Integer>> adjList = new HashMap<>();
    
    // Method to add an edge to the graph (for undirected graph)
    public void addEdge(int v, int w) {
        adjList.computeIfAbsent(v, k -> new ArrayList<>()).add(w);
        adjList.computeIfAbsent(w, k -> new ArrayList<>()).add(v); // For undirected graph
    }
    
    // DFS recursive utility function
    private void dfsUtil(int v, Set<Integer> visited) {
        // Mark the current node as visited and print it
        visited.add(v);
        System.out.print(v + " ");
        
        // Recur for all the vertices adjacent to this vertex
        for (int neighbor : adjList.getOrDefault(v, new ArrayList<>())) {
            if (!visited.contains(neighbor)) {
                dfsUtil(neighbor, visited);
            }
        }
    }
    
    // DFS function to start DFS traversal from a given vertex
    public void dfs(int startVertex) {
        Set<Integer> visited = new HashSet<>(); // To track visited vertices
        dfsUtil(startVertex, visited);
    }
    
    public static void main(String[] args) {
        DFSGraph graph = new DFSGraph();
        
        // Adding edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(3, 4);
        
        System.out.println("Depth-First Search starting from vertex 0:");
        graph.dfs(0);  // Start DFS from vertex 0
    }
}
